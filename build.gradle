buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        google()
    }
    dependencies {
      classpath "com.android.tools.build:gradle:$androidPluginVersion"
      classpath "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
      classpath ("com.mobidevelop.robovm:robovm-gradle-plugin:$robovmVersion"){
        exclude group: 'org.bouncycastle'
      }
    }
}

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    // This allows you to "Build and run using IntelliJ IDEA", an option in IDEA's Settings.
    idea {
        module {
            outputDir file('build/classes/java/main')
            testOutputDir file('build/classes/java/test')
        }
    }
}

configure(subprojects - project(':android')) {
    apply plugin: 'java-library'
    sourceCompatibility = 11
    compileJava {
        options.incremental = true
    }
    // From https://lyze.dev/2021/04/29/libGDX-Internal-Assets-List/
    // The article can be helpful when using assets.txt in your project.
    compileJava.doLast {
        // projectFolder/assets
        def assetsFolder = new File("${project.rootDir}/assets/")
        // projectFolder/assets/assets.txt
        def assetsFile = new File(assetsFolder, "assets.txt")
        // delete that file in case we've already created it
        assetsFile.delete()

        // iterate through all files inside that folder
        // convert it to a relative path
        // and append it to the file assets.txt
        fileTree(assetsFolder).collect { assetsFolder.relativePath(it) }.each {
            assetsFile.append(it + "\n")
        }
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }
}


subprojects {
    repositories {
        mavenCentral()
   }
}

eclipse.project.name = 'blade-ink-template' + '-parent'

// Run `gradle pack` task to generate skin.atlas file at assets/ui.
import com.badlogic.gdx.tools.texturepacker.TexturePacker

tasks.register('pack') {

    doLast {

        // Note that if you need multiple atlases, you can duplicate the
        // TexturePacker.process invocation and change paths to generate
        // additional atlases with this task.
        TexturePacker.process(
            'raw/ui',           // Raw assets path.
            'assets/ui/1/',        // Output directory.
            'ui'              // Name of the generated atlas (without extension).
        )
    }
}

